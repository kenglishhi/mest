<html>
  <head>
    <title>M E S T :: Workbench </title>
    <%= stylesheet_link_tag  "/javascripts/ext-3.0.0/resources/css/ext-all.css",
      "ext-override",
      "workbench-style"
  %>

    <%= javascript_include_tag :defaults %>
    <%= javascript_tag "var FORM_AUTH_TOKEN = '#{form_auth_token}';" %>

    <%= javascript_include_tag "ext-3.0.0/adapter/ext/ext-base",
      "ext-3.0.0/ext-all" ,
      "ext-3.0.0/MultiSelect" ,
      "ext-3.0.0/FileUploadField" ,
      "workbench/base",
      "workbench/App",
      "workbench/RowEditor",
      "workbench/bio-notifier",
      "workbench/workbench-tree",
      "workbench/top-menu-toolbar",
      "workbench/restful-grid",
      "workbench/biosequence-grid",
      "workbench/biodatabase-grid",
      "workbench/fasta-file-grid",
      "workbench/biodatabase-group-grid",
      "workbench/blast-result-grid",
      "workbench/alignment-grid",
      "workbench/job-grid",
      "workbench/job-log-grid",
      "workbench/bio-property-grid",
      "workbench/biosequence-view-panel",
      "workbench/alignment-view-panel",
      "workbench/bio-form-windows",
      "workbench/ncbi-blast-form"
  %>
    <style type="text/css">
      .x-window-dlg .ext-mb-download {
        background:transparent url(images/download.gif) no-repeat top left;
        height:46px;
      }
      #msg-div {
        position:absolute;
        left:35%;
        top:10px;
        width:250px;
        z-index:20000;
      }
    </style>
    <script type="text/javascript">

      Ext.onReady(function(){
<%= render :partial => "layouts/user_job_notification" %>

    Ext.workbenchdata.biosequenceStore = <%=
extjs_store( :controller => "workbench/biosequences",
  :model => "biosequence",
  :writer => {"encode" => false},
  :config => {
    "totalProperty" => 'results',
    "autoLoad" => false,
    "autoSave" => true,
    "restful" => true
  }
).render(false)
%>
    Ext.workbenchdata.biodatabaseStore = <%=
extjs_store( :controller => "workbench/biodatabases",
  :model => "biodatabase",
  :writer => {"encode" => false},
  :config => {
    "totalProperty" => 'results',
    "autoLoad" => false,
    "autoSave" => true,
    "restful" => true
  }

).render(false)
%>

    Ext.workbenchdata.fastaFileStore = <%=
extjs_store( :controller => "workbench/fasta_files",
  :model => "fasta_file",
  :writer => {"encode" => false},
  :config => {
    "totalProperty" => 'results',
    "autoLoad" => false,
    "autoSave" => true,
    "restful" => true
  }

).render(false)
%>
    Ext.workbenchdata.jobLogStore = <%=
extjs_store( :controller => "workbench/job_logs",
  :model => "job_log",
  :writer => {"encode" => false},
  :config => {
    "totalProperty" => 'results',
    "autoLoad" => true,
    "autoSave" => true,
    "restful" => true
  }

).render(false)
%>

    Ext.workbenchdata.rawDbsComboStore = <%=
extjs_store( :controller => "workbench/raw_biodatabases",
  :model => "biodatabase",
  :writer => {"encode" => false},
  :config => {
    "storeId" => 'raw-dbs-combo-store',
    "autoLoad" => true,
    "autoSave" => false,
    "restful" => true
  }

).render(false)
%>

    Ext.workbenchdata.generatedDbsComboStore = <%=
extjs_store( :controller => "workbench/generated_biodatabases",
  :model => "biodatabase",
  :writer => {"encode" => false},
  :config => {
    "storeId" => 'generated-dbs-combo-store',
    "autoLoad" => true,
    "autoSave" => false,
    "restful" => true
  }
).render(false)
%>
    Ext.workbenchdata.groupDbsComboStore = <%=
extjs_store( :controller => "workbench/group_biodatabases",
  :model => "biodatabase",
  :writer => {"encode" => false},
  :config => {
    "storeId" => 'group-dbs-combo-store',
    "autoLoad" => true,
    "autoSave" => false,
    "restful" => true
  }
).render(false)
%>


    var biodatabasePropertyStore = <%=
extjs_store( :controller => "workbench/biodatabases",
  :model => "biodatabase",
  :writer => {"encode" => false},
  :config => {
    "storeId" => 'biodatabase-property-store',
    "autoLoad" => false,
    "autoSave" => true,
    "restful" => true
  }
).render(false)
%>
    Ext.workbenchdata.runningJobStore = <%=
extjs_store( :controller => "workbench/jobs",
  :model => 'Job',
  :writer => {"encode" => false},
  :config => {
    "storeId" => 'running-job-store',
    "totalProperty" => 'results',
    "autoLoad" => false,
    "autoSave" => true,
    "restful" => true
    #   // ,
    #    'baseParams' => 'option=Queued'
  }
).render(false)
%>
    var queuedJobStore = <%=
extjs_store( :controller => "workbench/jobs",
  :model => 'Job',
  :writer => {"encode" => false},
  :config => {
    "storeId" => 'queued-job-store',
    "totalProperty" => 'results',
    "autoLoad" => false,
    "autoSave" => true,
    "restful" => true
  }
).render(false)
%>
    Ext.workbenchdata.blastResultStore = <%=
extjs_store( :controller => "workbench/blast_results",
  :model => "blast_result",
  :writer => {"encode" => false},
  :config => {
    "totalProperty" => 'results',
    "autoLoad" => false,
    "autoSave" => true,
    "restful" => true
  }
).render(false)
%>

    Ext.workbenchdata.alignmentsStore = new Ext.data.JsonStore({
      "restful":true,
      "autoSave":false,
      "url":"/workbench/alignments.json",
      "fields":[{"type":"int",
          "allowBlank":true,
          "name":"id"},
        {"type":"string",
          "allowBlank":true,
          "name":"label"},
        {"type":"auto",
          "allowBlank":true,
          "name":"alignment_file_name_display"},
        {"type":"auto",
          "allowBlank":true,
          "name":"alignment_file_url"} ],
      "totalProperty":"results",
      "messageProperty":"message",
      "root":"data",
      "successProperty":"success",
      "idProperty":"id",
      "storeId":"blastresult",
      "autoLoad":true,
      writer:new Ext.data.JsonWriter({"encode":false})
    });

    Ext.workbenchMenu.seqPageSize = <%= biosequence_page_size %> ;
    Ext.workbenchMenu.blastResultPageSize = <%= blast_result_page_size %> ;
    Ext.workbenchMenu.jobPageSize=  <%= job_page_size %> ;

    // BEGIN RAILS data DUMP
    Ext.workbenchdata.projectOptions = <%= @project_options.to_json %>;
    Ext.workbenchdata.changeProjectUrl = '<%= url_for :controller => 'workbench/home', :action => 'change_project' %>';
    // END RAILS data dump  -- no erb code should go beyond this line
    // var dbGroupTree = {"expandable":true,"leaf":false,"text":"Default Database Group 1","children":[{"leaf":true,"text":"EST_Clade_A_3"},{"leaf":true,"text":"EST_Clade_A_6"},{"leaf":true,"text":"EST_Clade_C_6"},{"leaf":true,"text":"EST_Clade_A_1"},{"leaf":true,"text":"EST_Clade_A_5"},{"leaf":true,"text":"EST_Clade_A_3-Cleaned"},{"leaf":true,"text":"EST_Clade_A_6-Cleaned"},{"leaf":true,"text":"EST_Clade_C_6-Cleaned"},{"leaf":true,"text":"EST_Clade_A_1-Cleaned"},{"leaf":true,"text":"EST_Clade_A_5-Cleaned"},{"expandable":true,"leaf":false,"text":"Cleaned Data","children":[],"id":2,"expanded":true}],"id":1,"expanded":true} ;,

    // it is generally best to disable state management as dynamically-generated ids
    // can change across page loads, leading to unpredictable results.  The developer
    // should ensure that stable state ids are set for stateful components in real apps.
    Ext.state.Manager.setProvider(new Ext.state.CookieProvider());

    Ext.QuickTips.init();

    // use RowEditor for editing
    var editor = new Ext.ux.grid.RowEditor({
      saveText: 'Update'
    });

    Ext.bio.workbench.afterUploadFasta = function(){
      Ext.getCmp('workbench-grid-tabs').activate('workbench-fasta-file-tab');
      var dbTree= Ext.getCmp('bio-workbench-tree');
      dbTree.refresh();
    }
    Ext.bio.workbench.updateContent = function(node){
      var params ={};
      if (node.attributes.resource =='biodatabase') {
        var mainTabs = Ext.getCmp('workbench-grid-tabs');
        if (!(mainTabs.activeTab.id =='workbench-biosequence-tab'
          || mainTabs.activeTab.id =='workbench-blast-results-tab')) {

          Ext.getCmp('workbench-grid-tabs').activate('workbench-biosequence-tab');

        }
        params.biodatabase_id = node.id;
        params.biodatabase_name = node.text;
        Ext.getCmp('workbench-biosequence-grid').updateContent(params);
        Ext.getCmp('workbench-blast-results-grid').updateContent(params);
      } else if (node.attributes.resource =='fasta_file' ) {
        Ext.getCmp('workbench-grid-tabs').activate('workbench-fasta-file-tab');
      }
    };
    Ext.bio.workbench.clearContent = function(){
      Ext.getCmp('workbench-biosequence-grid').clearContent();
    };

    Ext.workbenchMenu.currentUserDisplayName = '<%= current_user.full_name %> (<%= current_user.email %>) ' ;
    Ext.workbenchMenu.currentProjectId = <%= current_user.active_project.id %>;
    Ext.workbenchMenu.projectOptions = <%= @project_options.to_json %>;
    Ext.workbenchMenu.changeProjectUrl = '<%= url_for :controller => 'workbench/home', :action => 'change_project' %>';

    Ext.workbenchMenu.mest_html = 'MEST';
    Ext.workbenchMenu.home_html = '<%= link_to "Home", '/' %>  ';
    Ext.workbenchMenu.workbench_html = '<%= link_to 'Workbench',  "/workbench"  %>' ;
    Ext.workbenchMenu.databases_html = '<%= link_to 'Databases', fasta_files_path  %>' ;
    Ext.workbenchMenu.jobs_html = '<%= link_to 'Jobs', jobs_running_jobs_path %>';
    Ext.workbenchMenu.admin_html = '<%= link_to 'Admin', admin_users_path  %>';

    var tb = new Ext.bio.TopMenuToolbar({
      id:'top-menu-toolbar',
      menuData:Ext.workbenchMenu
    });


    var viewport = new Ext.Viewport({
      layout: 'border',
      items: [
        {  region: 'north',
          items: [tb],
          height: 32 // give north and south regions a height
        }, {
          region: 'west',
          title: 'Database Browser',
          width: 200,
          minSize: 175,
          margins: '0 0 0 5',
          collapsible: true,
          split: true,
          id: 'bio-workbench-tree',
          xtype:'workbench-tree',
          //          treeData: dbGroupTree,
          projectOptions: Ext.workbenchdata.projectOptions,
          clickAction: function(node) {
            Ext.bio.workbench.updateContent(node);
          },
          postDeleteAction: function() {
            Ext.bio.workbench.clearContent();
          },
          postRefresh: function(){
            Ext.workbenchdata.generatedDbsComboStore.reload();
            Ext.workbenchdata.rawDbsComboStore.reload();
            Ext.workbenchdata.biosequenceStore.reload();
          },
          bbar: ['->', {
              text: "Blast Help Window",
              handler: function() {
                Ext.workbenchMenu.blastHelpWindow.show();
              }
            } ]
        } ,
        {
          region: 'center',
          layout: 'border',
          items: [{
              id: 'workbench-grid-tabs',
              region: 'north',
              split: true,
              height: 330,
              xtype: 'tabpanel',
              deferredRender: true,
              activeTab: 2,
              items: [
                {
                  iconCls:'new_fasta',
                  title: 'Sequences',
                  id: 'workbench-biosequence-tab',
                  autoScroll: true,
                  items: [{
                      id: 'workbench-biosequence-grid',
                      xtype:'biosequence-grid',
                      pageSize: Ext.workbenchMenu.seqPageSize,
                      store: Ext.workbenchdata.biosequenceStore,
                      biodatabasePropertyStore: biodatabasePropertyStore,
                      biosequenceViewPanelId: 'biosequence-view',
                      alignmentViewPanelId: 'alignment-view'
                    }]
                },
                {
                  iconCls:'new_view',
                  title: 'Blast Results',
                  autoScroll: true,
                  id:'workbench-blast-results-tab',
                  items: [ {
                      id: 'workbench-blast-results-grid',
                      pageSize: Ext.workbenchMenu.blastResultPageSize,
                      xtype:'blast-result-grid' ,
                      store: Ext.workbenchdata.blastResultStore
                    } ]

                },
                [

                  {

                    iconCls:'grid_icon',
                    title: 'Running Jobs',
                    autoScroll: true,
                    id:'workbench-running-jobs-tab',
                    layout: 'border',
                    listeners: {
                      activate: function() {
                        if (Ext.getCmp('wb-running-jobs-grid')) {
                          Ext.getCmp('wb-running-jobs-grid').refreshContent();
                        }
                        if (Ext.getCmp('wb-queued-jobs-grid')) {
                          Ext.getCmp('wb-queued-jobs-grid').refreshContent();
                        }
                      }
                    },
                    items: [ {
                        region:'north',
                        collapsible: true,
                        split: true,
                        autoScroll: true,
                        title: 'Running Jobs',
                        height: 170,
                        id: 'wb-running-jobs-grid',
                        queuedJobGridCmpId: 'wb-queued-jobs-grid',
                        pageSize: Ext.workbenchMenu.jobPageSize,
                        xtype:'running-job-grid' ,
                        store: Ext.workbenchdata.runningJobStore
                      }
                      , {
                        region:'center',
                        collapsible: true,
                        split: true,
                        autoScroll: true,
                        title: 'Queued Jobs',
                        height: 200,
                        id: 'wb-queued-jobs-grid',
                        pageSize: Ext.workbenchMenu.jobPageSize,
                        xtype:'queued-job-grid' ,
                        store: queuedJobStore}
                    ]

                  }], {
                  iconCls:'image_add',
                  title: 'Job Log',
                  autoScroll: true,
                  id:'workbench-job-log-tab',
                  items: [
                    {id: 'workbench-job-logs-grid',
                      pageSize: Ext.workbenchMenu.jobPageSize,
                      xtype:'job-log-grid' ,
                      store: Ext.workbenchdata.jobLogStore }
                  ]

                },
                {
                  iconCls:'fasta-file-folder',
                  title: 'Upload Fasta Files',
                  autoScroll: true,
                  id:'workbench-fasta-file-tab',
                  items: [ {
                      id: 'workbench-fasta-file-grid',
                      xtype:'fasta-file-grid' ,
                      store:Ext.workbenchdata.fastaFileStore
                    } ]
            
                }
                /*                ,
                {
                  iconCls:'clustalw',
                  title: 'Alignment Output Files',
                  autoScroll: true,
                  id:'alignments-result-tab',
                  items: [ {
                      id: 'alignments-results-grid',
                      xtype:'alignments-grid' ,
                      store: Ext.workbenchdata.alignmentsStore
                    } ]

                }
                 */

              ]
            },{
              xtype: 'tabpanel',
              id: 'workbench-detail-tabs',
              plain: true,
              split: true,
              deferredRender: true,
              region: 'center',
              margins: '0 5 5 5',
              activeTab: 0,
              items: [{
                  title: 'Sequence',
                  xtype: 'biosequence-view-panel',
                  iconCls:'new_fasta',
                  id: 'biosequence-view'
                },{
                  title: 'Alignment',
                  xtype: 'alignment-view-panel',
                  iconCls:'clustalw',
                  id: 'alignment-view'
                }]
            }]
        }
      ]
    });

    var button1 = Ext.get('rename-biosequences');
    button1.on('click', Ext.bio.showBiodatabaseRenamerWindow);

    var button2 = Ext.get('clean-biodatabase');
    button2.on('click', Ext.bio.showBlastCleanerWindow);

    var button3 = Ext.get('blast-biodatabase');
    button3.on('click', Ext.bioshowBlastCreateDbsWindow);

  });
    </script>
  </head>
  <body>

    <div id="my-header-div"  class="x-hide-display">
      <div style='float:left;' class="north-header"> <%= link_to "MEST", '/' %>  - <%= link_to "Home", '/' %></div>
      <div  style='float: right; width: 500px;' >
        <div id='project-options-header' />
      </div>
    </div>

    <div id="rename-content" class="x-hide-display">
      <input type="button" id="rename-biosequences" value="Rename Sequences" /><br />
      <p>Allows you to rename sequences sequentially in a database with a prefix and sequential number.</p>
    </div>
    <div id="clean-content" class="x-hide-display">
      <input type="button" id="clean-biodatabase" value="Clean Database" /><br />
      <p>Allows you to clean a database with blast.</p>
    </div>
    <div id="blast-content" class="x-hide-display">
      <input type="button" id="blast-biodatabase" value="Blast Database" /><br />
      <p>Allows you to blast databases against one another.</p>
    </div>
    <div id="ncbi-blast-content" class="x-hide-display">
      <input type="button" id="ncbi-blast-search" value="NCBI Blast" /><br />
      <p>Blast Sequence against NCBI.</p>

    </div>

    <form target="_blank" method="POST" action="http://blast.ncbi.nlm.nih.gov/Blast.cgi" enctype="multipart/form-data" class="f-wrap-1 all" id="ncbi-blast-search-form">
      <input type="hidden" name="ALIGNMENT_VIEW" id="ALIGNMENT_VIEW" value=""/><input type="hidden" name="ALIGNMENTS" id="ALIGNMENTS" value="100"/><input type="hidden" name="BLAST_PROGRAMS" id="BLAST_PROGRAMS" value="blastn"/><input type="hidden" name="BLAST_SPEC" id="BLAST_SPEC" value=""/><input type="hidden" name="CLIENT" id="CLIENT" value="web"/><input type="hidden" name="CMD" id="CMD" value="request"/><input type="hidden" name="COMPOSITION_BASED_STATISTICS" id="COMPOSITION_BASED_STATISTICS" value=""/><input type="hidden" name="DATABASE" id="DATABASE" value="nr"/><input type="hidden" name="db" id="db" value="nucleotide"/><input type="hidden" name="DB_ABBR" id="DB_ABBR" value=""/><input type="hidden" name="DB_DIR_PREFIX" id="DB_DIR_PREFIX" value=""/><input type="hidden" name="DBTYPE" id="DBTYPE" value="gc"/><input type="hidden" name="DEFAULT_PROG" id="DEFAULT_PROG" value="megaBlast"/><input type="hidden" name="DESCRIPTIONS" id="DESCRIPTIONS" value="100"/><input type="hidden" name="EQ_MENU" id="EQ_MENU" value=""/><input type="hidden" name="EQ_TEXT" id="EQ_TEXT" value=""/><input type="hidden" name="EXCLUDE_MODELS" id="EXCLUDE_MODELS" value="on"/><input type="hidden" name="EXCLUDE_SEQ_UNCULT" id="EXCLUDE_SEQ_UNCULT" value="on"/><input type="hidden" name="EXPECT" id="EXPECT" value="25"/><input type="hidden" name="EXPECT_HIGH" id="EXPECT_HIGH" value=""/><input type="hidden" name="EXPECT_LOW" id="EXPECT_LOW" value=""/><input type="hidden" name="FILTER" id="FILTER" value=""/><input type="hidden" name="FORMAT_EQ_TEXT" id="FORMAT_EQ_TEXT" value=""/><input type="hidden" name="FORMAT_OBJECT" id="FORMAT_OBJECT" value="Alignment"/><input type="hidden" name="FORMAT_ORGANISM" id="FORMAT_ORGANISM" value=""/><input type="hidden" name="FORMAT_TYPE" id="FORMAT_TYPE" value="HTML"/><input type="hidden" name="GAPCOSTS" id="GAPCOSTS" value=""/><input type="hidden" name="GENETIC_CODE" id="GENETIC_CODE" value=""/><input type="hidden" name="GET_SEQUENCE" id="GET_SEQUENCE" value="true"/><input type="hidden" name="I_THRESH" id="I_THRESH" value=""/><input type="hidden" name="JOB_TITLE" id="JOB_TITLE" value="HIMB-A100"/><input type="hidden" name="LCASE_MASK" id="LCASE_MASK" value="on"/><input type="hidden" name="MASK_CHAR" id="MASK_CHAR" value="2"/><input type="hidden" name="MASK_COLOR" id="MASK_COLOR" value="1"/><input type="hidden" name="MATCH_SCORES" id="MATCH_SCORES" value="1,-2"/><input type="hidden" name="MATRIX_NAME" id="MATRIX_NAME" value=""/><input type="hidden" name="MAX_NUM_SEQ" id="MAX_NUM_SEQ" value="20"/><input type="hidden" name="MEGABLAST" id="MEGABLAST" value="on"/><input type="hidden" name="NCBI_GI" id="NCBI_GI" value="false"/><input type="hidden" name="NEW_VIEW" id="NEW_VIEW" value="true"/><input type="hidden" name="NEWWIN" id="NEWWIN" value="on"/><input type="hidden" name="NO_COMMON" id="NO_COMMON" value=""/><input type="hidden" name="NUM_DIFFS" id="NUM_DIFFS" value="1"/><input type="hidden" name="NUM_OPTS_DIFFS" id="NUM_OPTS_DIFFS" value="0"/><input type="hidden" name="NUM_ORG" id="NUM_ORG" value="1"/><input type="hidden" name="NUM_OVERVIEW" id="NUM_OVERVIEW" value="100"/><input type="hidden" name="OLD_BLAST" id="OLD_BLAST" value="false"/><input type="hidden" name="ORG_EXCLUDE" id="ORG_EXCLUDE" value=""/><input type="hidden" name="PAGE" id="PAGE" value="MegaBlast"/><input type="hidden" name="PAGE_TYPE" id="PAGE_TYPE" value="BlastSearch"/><input type="hidden" name="PHI_PATTERN" id="PHI_PATTERN" value=""/><input type="hidden" name="PROGRAM" id="PROGRAM" value="blastn"/><input type="hidden" name="PSSM" id="PSSM" value=""/><input type="hidden" name="QUERY" id="QUERY" value="GGGGAGACCAACCCTATCTCTTGCACTTTCGACTCCAAGGCTGGCATCATGCTGGACCCCACCTTCGTCAAGGTGGTGTGCTGGTATGACAACGAGTGGGGCTACAGCTGCCGAGTTGTCGACTTGATCAAGCACATGGCGAAGGAGGATGCCAAGGCATAAGCTTGTCCACCCGAGGCTGCAAGTGTTGAAACACAATTAGAAGATTCCTAGAGGTTGATTAAATCAACCTACTCTTGCTCCTCTCGGACTCTCCGAGCTTATTTTTCCTTATTGCTGCCGAGCACACGGGCATGCCCCACCTCGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACATGT"/><input type="hidden" name="QUERY_BELIEVE_DEFLINE" id="QUERY_BELIEVE_DEFLINE" value=""/><input type="hidden" name="QUERY_FROM" id="QUERY_FROM" value=""/><input type="hidden" name="QUERY_INDEX" id="QUERY_INDEX" value=""/><input type="hidden" name="QUERY_TO" id="QUERY_TO" value=""/><input type="hidden" name="QUERYFILE" id="QUERYFILE" value=""/><input type="hidden" name="REPEATS" id="REPEATS" value=""/><input type="hidden" name="RUN_PSIBLAST" id="RUN_PSIBLAST" value=""/><input type="hidden" name="SAVED_PSSM" id="SAVED_PSSM" value=""/><input type="hidden" name="SAVED_SEARCH" id="SAVED_SEARCH" value="true"/><input type="hidden" name="SELECTED_PROG_TYPE" id="SELECTED_PROG_TYPE" value="megaBlast"/><input type="hidden" name="SERVICE" id="SERVICE" value="plain"/><input type="hidden" name="SHORT_QUERY_ADJUST" id="SHORT_QUERY_ADJUST" value=""/><input type="hidden" name="SHOW_CDS_FEATURE" id="SHOW_CDS_FEATURE" value="false"/><input type="hidden" name="SHOW_LINKOUT" id="SHOW_LINKOUT" value="true"/><input type="hidden" name="SHOW_OVERVIEW" id="SHOW_OVERVIEW" value="true"/><input type="hidden" name="stype" id="stype" value="nucleotide"/><input type="hidden" name="SUBJECTFILE" id="SUBJECTFILE" value=""/><input type="hidden" name="SUBJECTS" id="SUBJECTS" value=""/><input type="hidden" name="SUBJECTS_FROM" id="SUBJECTS_FROM" value=""/><input type="hidden" name="SUBJECTS_TO" id="SUBJECTS_TO" value=""/><input type="hidden" name="TEMPLATE_LENGTH" id="TEMPLATE_LENGTH" value=""/><input type="hidden" name="TEMPLATE_TYPE" id="TEMPLATE_TYPE" value=""/><input type="hidden" name="TWO_HITS" id="TWO_HITS" value=""/><input type="hidden" name="UNIQ_DEFAULTS_NAME" id="UNIQ_DEFAULTS_NAME" value="A_SearchDefaults_1N2ADa_oee_1Z5H3Q7o1_GTR6V_1OgPIQ"/><input type="hidden" name="USER_DATABASE" id="USER_DATABASE" value=""/><input type="hidden" name="USER_DEFAULT_MATCH_SCORES" id="USER_DEFAULT_MATCH_SCORES" value="0"/><input type="hidden" name="USER_DEFAULT_PROG_TYPE" id="USER_DEFAULT_PROG_TYPE" value="megaBlast"/><input type="hidden" name="USER_FORMAT_DEFAULTS" id="USER_FORMAT_DEFAULTS" value=""/><input type="hidden" name="USER_MATCH_SCORES" id="USER_MATCH_SCORES" value=""/><input type="hidden" name="USER_WORD_SIZE" id="USER_WORD_SIZE" value=""/><input type="hidden" name="WORD_SIZE" id="WORD_SIZE" value="28"/><input type="hidden" name="WWW_BLAST_TYPE" id="WWW_BLAST_TYPE" value=""/>
    </form>


    <!--
    <div id="showtest-content" class="x-hide-display">
      <input type="button" id="show-msg" value="Show Message" /><br />
      <input type="button" id="hide-msg" value="Hide Message" /><br />
      <p>Test </p>
    </div>
    <div id="more-content" class="x-hide-display">
      <b>More Content.</b>
      <p>more awesome content will go here....</p>
    </div>

    -->

    <%= render :partial => 'blast_help_window' %>

  </body>
</html>
